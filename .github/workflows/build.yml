name: Build
on: [push, pull_request]

jobs:
  Build:
    name: "Build on ${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
          # - os: macOS-latest
          #   name: MacOS
          - os: windows-latest
            name: Windows
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      
      - name: Update G++
        if: matrix.name == 'Linux'
        run: sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

      - name: Install Conan
        run: |
          pip3 install conan
          mkdir build

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: '5.15.2'

      - uses: actions/cache@v1
        if: matrix.name == 'Linux'
        name: Cache for linux
        id: cache_linux
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

      - name: Linux install mandatory libs for conan install
        if: matrix.name == 'Linux'
        run: |
          sudo apt-get install -y libgl-dev

      - name: Run Conan install Linux
        if: matrix.name == 'Linux'
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        run: |
          cd build
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.compiler.version=10 default
          conan config set general.revisions_enabled=1
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan
          conan install .. --build missing

      - uses: actions/cache@v1
        name: Cache for windows
        if: matrix.name == 'Windows'
        id: cache_windows
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.txt') }}
          restore-keys: ${{ runner.os }}-builder-${{ env.cache-name }}-

      - name: Run Conan install Windows
        if: matrix.name == 'Windows'
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        run: |
          cd build
          conan profile new --detect default
          conan config set general.revisions_enabled=1
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan
          conan install .. --build missing


      - name: Build Main Binaries
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build .
      
      - name: CheckBinaryName
        shell: bash
        if: matrix.name == 'Linux'
        run: |
          test -f build/Client/babel_client && test -f build/Server/babel_server
      
#      - name: Archive production artifact for Windows binary
#        if: matrix.name == 'Windows'
#        uses: actions/upload-artifact@v1
#        with:
#          name: BombermanWindows.exe
#          path: build/Debug/bomberman.exe
#      - name: Archive production artifact for Linux binary
#        if: matrix.name == 'Linux'
#        uses: actions/upload-artifact@v1
#        with:
#          name: BombermanLinux
#          path: build/bomberman