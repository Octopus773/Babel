name: Run Tests
on: [push, pull_request]

jobs:
  Build:
    name: "Run tests on ${{ matrix.name }}"
    runs-on: ${{ matrix.os }}
    if: github.event_name == 'push' || github.event.pull_request.head.repo.full_name != github.repository
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            name: Linux
          # - os: macOS-latest
          #   name: MacOS
          - os: windows-latest
            name: Windows
    steps:
      - uses: actions/checkout@v1
        with:
          submodules: true

      - name: Update G++
        if: matrix.name == 'Linux'
        run: sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-10 100

      - name: Install Conan
        run: |
          pip3 install conan
          mkdir build

      - name: Cache Qt
        id: cache-qt
        uses: actions/cache@v1  # not v2!
        with:
          path: ../Qt
          key: ${{ runner.os }}-QtCache

      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
          cached: ${{ steps.cache-qt.outputs.cache-hit }}
          version: '5.15.2'

#      - uses: actions/cache@v1
#        if: matrix.name == 'Linux'
#        name: Cache for linux
#        id: cache_linux
#        env:
#          CONAN_USER_HOME: "${{ github.workspace }}/release/"
#          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
#          cache-name: cache-conan-modules
#        with:
#          path: ${{ env.CONAN_USER_HOME }}
#          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.txt') }}

      - name: Setup Conan Linux
        if: matrix.name == 'Linux'
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        run: |
          cd build
          conan profile new --detect default
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update settings.compiler.version=10 default
          conan config set general.revisions_enabled=1
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan

      - uses: actions/cache@v1
        name: Cache for windows
        if: matrix.name == 'Windows'
        id: cache_windows
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        with:
          path: ${{ env.CONAN_USER_HOME }}
          key: ${{ runner.os }}-builder-${{ env.cache-name }}-${{ hashFiles('conanfile.txt') }}

      - name: Setup Conan Windows
        if: matrix.name == 'Windows' && steps.cache_windows.outputs.cache-hit != 'true'
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
          cache-name: cache-conan-modules
        run: |
          cd build
          conan profile new --detect default
          conan config set general.revisions_enabled=1
          conan remote add bincrafters https://bincrafters.jfrog.io/artifactory/api/conan/public-conan

      - name: Build Client Test Binary
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
        run: |
          cd build
          conan install .. --build missing
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . -t client_unit_tests
      
      - name: Run Client tests Linux
        shell: bash
        if: matrix.name == 'Linux'
        run: |
          ./build/bin/client_unit_tests
      
      - name: Run Client tests Windows
        shell: bash
        if: matrix.name == 'Windows'
        run: |
          mv build/bin/client_unit_tests.exe build/bin/
          build/bin/client_unit_tests.exe
      
      - name: Build Server Test Binary
        env:
          CONAN_USER_HOME: "${{ github.workspace }}/release/"
          CONAN_USER_HOME_SHORT: "${{ github.workspace }}/release/short"
        run: |
          cd build
          conan install .. --build missing
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . -t server_unit_tests
      
      - name: Run Server tests Linux
        shell: bash
        if: matrix.name == 'Linux'
        run: |
          ./build/bin/server_unit_tests
      
      - name: Run Server tests Windows
        shell: bash
        if: matrix.name == 'Windows'
        run: |
          mv build/bin/server_unit_tests.exe build/bin/
          build/bin/server_unit_tests.exe