<?xml version="1.0" encoding="UTF-8"?>
  <?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
]>

<rfc ipr="trust200902" docName="draft-babel-protocol-v0.1"
     category="info" >

<?rfc toc="yes"?>
<?rfc sortrefs="yes"?>
<?rfc symrefs="yes" ?>

  <front>
    <title abbrev="Babel Protocol">
      EPITECH's VoIP Project 2021; Babel
    </title>
    <author initials="C" surname="Le Bihan" fullname="ClÃ©ment Le Bihan">
      <organization>Epitech Promo 2024; Team Leader</organization>
      <address>
        <email>clement.lebihan773@gmail.com</email>
      </address>
    </author>
    <author initials="A" surname="Djebar" fullname="Adam Djebar">
      <address>
        <email>adam.djebar@epitech.eu</email>
      </address>
    </author>
    <author initials="M" surname="Glo" fullname="Marius Glo">
      <address>
        <email>marius1.glo@epitech.eu</email>
      </address>
    </author>
    <author initials="U" surname="Genereau" fullname="Ugo Genereau">
      <address>
        <email>ugo.genereau@epitech.eu</email>
      </address>
    </author>

    <date year="2021" month="September" day="21"/>

    <area>General</area>
    <workgroup>Nantes Working Group</workgroup>
    <keyword>Babel Protocol</keyword>
    <abstract>
      <t>
        The Babel is VoIP application able to make voice calls like Skype, TeamSpeak or Discord
      </t>
      <t>
        The Babel Protocol allows anyone to implement their own client or
        servers and be able to communicate with our wondeful implementation

        Main git repo:
        https://github.com/Octopus773/Babel
      </t>

    </abstract>
  </front>

  <middle>

{:/nomarkdown}

Introduction        {#problems}
============

~~~~~~~~~~

______       _          _
| ___ \     | |        | |
| |_/ / __ _| |__   ___| |
| ___ \/ _` | '_ \ / _ \ |
| |_/ / (_| | |_) |  __/ |
\____/ \__,_|_.__/ \___|_|

~~~~~~~~~~

 The Babel Protocol allows anyone to implement their own client or
 servers and be able to communicate with our wondeful implementation


Protocol Definition
===================

Terminology          {#Terminology}
-----------
In this document, the key words "MUST", "MUST NOT", "REQUIRED",
"SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119
{{RFC2119}} and indicate requirement levels for compliant Babel
implementations.

Endianness
------------
Every variable on the network is in Big Endian

Must know
------------------
The first 2 bytes of each message is a code Id and is interpreted as
an uint16_t and is used to classify your request


Client -> Server Protocol
=========================

Login
--------------

200 username_length username - Login a user in the server

        * username_length : The length of the login of the user, must be between 3 and 10 : 1 byte (uint8_t)

        * username : The username  : username_length bytes (char)


        Responses from server:

            On error:
            300 : response_code : 0
            and the description will explain the error

            On success:
            300: response_code: 1
            description is set to a generic login success message

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+--
        |           200           |     username_length     |          username ...
        +------------+------------+------------+------------+------------+------------+--
~~~~~~~~~~
{: #figops title="Login Protocol from Client to server"}

List users
--------------

201 - Get the list of server currently active users

        Responses from server:
            300: response_code: 1

            WARNING no description_length and description in this response

            array_length: uint16_t (2 bytes)

            an array of connected users following the pattern
            username_length: the length of the username, length: uint8_t
            username: the connected user username, length: username_length
            canBeCalled: a boolean set to 1 if he can be called and set to 0 otherwise, length: uint8_t

~~~~~~~~~~
        +------------+------------+
        |           201           |
        +------------+------------+
~~~~~~~~~~

Call user
--------------

202 - Call a user from its username

        You have to be logged in to make this request

        * username_length : The length of the login of the user, must be between 3 and 10 : 1 byte (uint8_t)

        * username : The username  : username_length bytes (char)

        Responses from server:
            On error:
                300: response_code: 0
                description will explain the error

            On success:
                300: response_code: 1
                description: will be set to the callId as string (you have to make a request joinCall with this callId)

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+--
        |           202           |     username_length     |          username ...
        +------------+------------+------------+------------+------------+------------+--
~~~~~~~~~~

Joining a call
--------------

203 - Joining a call

        You have to be logged in to make this request

        * callId : the call Id you want to join : (uint16_t)

        * udpAddress_length : The length of the udpAddress : (uint8_t)

        * udpAddress : the address (in ipv4 format) to receive audio udp packets  : (udpAddress_length length)

        * updPort : the port of the udpAddress to receive audio udp packets : (uint16_t)


        Responses from server:

            On error:
                300: response_code: 0
                description will be set to the error description

            On success:
                300: response_code: 1

                WARNING no description_length and description in this response

                array_length: 2 bytes (uint16_t)

                an array of call participants following the pattern:
                udpAddress_length: uint8_t
                udpAddress: udpAddress_length length
                udpPort: uint16_t
                username_length: uint8_t
                username: username_length length

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+------------+
        |           203           |          callId         |          udpAddress_length           | -->
        +------------+------------+------------+------------+------------+------------+------------+
        +------------+------------+------------+------------+
        |        udpAddress       |         updPort         |
        +------------+------------+------------+------------+
~~~~~~~~~~

Deny a receiving call
--------------

204 - Deny a call from a user

        You have to be logged in to make this request

        * callId : the call Id you want to join : (uint16_t)

~~~~~~~~~~
        +------------+------------+------------+------------+
        |           204           |         callId          |
        +------------+------------+------------+------------+
~~~~~~~~~~

Hang up a call
--------------

205 - Hang up a call

        You have to be logged in to make this request

        * callId : the call Id you want to leave : (uint16_t)

~~~~~~~~~~
        +------------+------------+------------+------------+
        |           205           |         callId          |
        +------------+------------+------------+------------+
~~~~~~~~~~

Server -> Client Protocol
=========================

General purpose response
--------------

300 - general purpose response

        * response_code (code meaning will be defined in the return response of a request) : 2 bytes (uint16_t)

        Unless explicitly specified the server responses will always have a description

        * description_length : The length of the description : 1 byte (uint8_t)

        * description : human readable response (can be displayed to the user) : description_length bytes (char)

        The response_code code meaning is, unless specified otherwise in the request response section:
        1: True: the request succeeded
        0: False: The request failed (details are in the description)

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+------------+------------+--
        |           300           |      response_code      |    description_length   |       description ...
        +------------+------------+------------+------------+------------+------------+------------+------------+--
~~~~~~~~~~


Receiving call
--------------

301 - Receiving a call from a user

        * callId : The id of the call, you have to make a request to the joinCall with this id to be in the call

        * username_length : The length of the login of the calling user : 1 byte (uint8_t)

        * username : The username of the user that want to make a call with you : username_length bytes (char)

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+--
        |           301           |          callId         |          username_length ...
        +------------+------------+------------+------------+------------+------------+--
        -------+------------+------------+
        ...    |         username        |
        -------+------------+------------+
~~~~~~~~~~

User joining call
--------------

302 - User joining the call

                * udpAddress_length : The length of the udpAddress : (uint8_t)

                * udpAddress : the address (in ipv4 format) to receive audio udp packets  : (udpAddress_length length)

                * updPort : the port of the udpAddress to receive audio udp packets : (uint16_t)

                * username_length : The length of the login of the user joining the call : 1 byte (uint8_t)

                * username : The username of the user that is joining the call : username_length bytes (char)

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+--
        |           302           |     udpAddress_length   |        udpAddress ...
        +------------+------------+------------+------------+------------+------------+--
        -----+------------+------------+------------+------------+------------+------------+--
         ... |         udpPort         |     username_length     |          username ...
        -----+------------+------------+------------+------------+------------+------------+--
~~~~~~~~~~

User leaving call
--------------

303 - User leaving the call

                * username_length : The length of the login of the user leaving the call : 1 byte (uint8_t)

                * username : The username of the user that is leaving the call : username_length bytes (char)

~~~~~~~~~~
        +------------+------------+------------+------------+------------+------------+--
        |           303           |     username_length     |          username ...
        +------------+------------+------------+------------+------------+------------+--
~~~~~~~~~~

{::nomarkdown}

</middle>

<back>

  <references title='Normative References'>

{:/nomarkdown}
![:include:](RFC2119)

{::nomarkdown}

  </references>

  <references title='Informative References'>

{:/nomarkdown}
![:include:](RFC5389)

{::nomarkdown}
  </references>
{:/nomarkdown}


{::nomarkdown}

</back>
</rfc>